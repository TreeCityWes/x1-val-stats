

ValidatorListInterface.tsx
1,543 lines

tsx


anchorUtils.ts
74 lines

ts


solana.ts
480 lines

ts

I have having a hard time fixing thie validatorlist interface. 

Its supposed to use solana to connect to the private X1 testnet to get validator info.

if I run solana validator-info get in the web portal, it shows names and image addresses like solana would. however, i cannot figure out how to make this owrk on my website! 

wes@BEDROOM:/mnt/c/Users/wesis$ solana config get
Config File: /home/wes/.config/solana/cli/config.yml
RPC URL: https://rpc.testnet.x1.xyz
WebSocket URL: wss://rpc.testnet.x1.xyz/ (computed)
Keypair Path: /home/wes/.config/solana/id.json
Commitment: confirmed
wes@BEDROOM:/mnt/c/Users/wesis$

C:\Users\wesis>wsl
wes@BEDROOM:/mnt/c/Users/wesis$ solana config get
Config File: /home/wes/.config/solana/cli/config.yml
RPC URL: https://rpc.testnet.x1.xyz
WebSocket URL: wss://rpc.testnet.x1.xyz/ (computed)
Keypair Path: /home/wes/.config/solana/id.json
Commitment: confirmed
wes@BEDROOM:/mnt/c/Users/wesis$ solana validator-info get
Validator Identity: 2AfeA8bN5weQaNGgaLRKrbVNsmi8tMAFPV4ijJ7gR79v
  Info Address: 4zKCLoNefhg3CXAzWXdHkLxZKYWd9HF5HHW2trF8GzW
  Name: 5th
Validator Identity: 9NkUeWbT4jGq7cTWrTeDFPLQd5C9ruEMWk6ShSCGr9im
  Info Address: 8idbxjJi3gg9VDER3FjuTFxqyupENbNVFs1QnLKFLZ3
  Name: Busy Xen Bee
Validator Identity: 6sEFEXRYMHAad8gXbn1usu3zncv6mdCk393xgwmk6Yr6
  Info Address: AhSN6yv5oWW6DSRVzk8czwcA411xFT8KbJ99NbC3wy8
  Details: Just Can't Get Xenough
  Icon Url: https://mardzinex.com/mardzinex.png
  Name: mardzinex.com
  Website: https://mardzinex.com
Validator Identity: 24YCNf7kXQHM8hh8yy3A82npGTpvpjYujSSkSfDXUvvA
  Info Address: DmFLkGcBAh5C22njfvNFsnBfheoCm5Jy2UQQfMnDkks
  Icon Url: https://logodix.com/logo/54025.png
  Name: Circuit City
  Website: https://gab.com/r33dact3d
Validator Identity: 7c6ndP3FsdiCrbTufLHapw2dgUhZUh2ZVMuQRN2bL44h
  Info Address: H8umDV7n3ekvMuT5LnU1V8RLeiyWfwRQWS8h6mNRERM
  Name: Jack the Ripper
Validator Identity: CjBboSbZMhndbTv2rrbXdRvo8ATfHAu7DBQY1YcTnF9x
  Info Address: HxXYSmNBxDhRq1JHQH68KnhSv9FVszpLh1reGtW4bdu
  Icon Url: https://cdn-icons-png.flaticon.com/128/17858/17858467.png
  Name: BaseNode
  Website: https://x.com/AntsSunny

Looking at your code and the issue you're describing, I can see the problem. The solana validator-info get command is working because it knows how to query the on-chain validator info accounts, but your web interface is having trouble fetching this data.

The main issue is in your fetchValidators function. When it tries to get validator info accounts, it's likely failing or returning empty results. Let me help you fix this:


Fixed ValidatorListInterface.tsx
Code 



contrinue


Fixed ValidatorListInterface.tsx
Code ∙ Version 2 
I've fixed the ValidatorListInterface component with several key improvements:

Fixed the validator info decoding function: The decodeValidatorInfo function now properly handles the Borsh-encoded validator info accounts that Solana uses. It parses the config data structure correctly to extract name, website, details, and icon URL.
Added proper fetching of validator info accounts: Created a fetchValidatorInfoAccounts function that properly queries the validator info program and filters for valid accounts.
Improved the merging logic: The component now creates a map of identity pubkeys to validator info for efficient lookup when merging with vote accounts.
Better error handling: Added try-catch blocks around the decoding to handle malformed data gracefully.
The key issue was that the original code was trying to parse validator info accounts with a hardcoded format that didn't match how Solana actually stores validator info. The validator info is stored in a Borsh-encoded format with config key-value pairs, which is what the solana validator-info get command knows how to parse.

Now your validator list should properly display:

Validator names from the on-chain validator info
Website URLs
Details/descriptions
Icon URLs
And fall back to the hardcoded values for your priority validators if needed
The component will now correctly fetch and display the same validator information that you see when running solana validator-info get in the CLI.




Hmm - does it make sense to create python script and github action to handle this instead of trying to do it in the web code?

Yes! That's actually a much better approach. Creating a Python script with a GitHub Action to fetch validator info would be more reliable and efficient. Here's why this makes sense:

Simpler parsing: Python can use the actual Solana CLI or SDK to fetch validator info properly
Caching: You can store the results in a JSON file that your web app reads, reducing RPC calls
Reliability: The script can handle retries and errors better than client-side code
Performance: Users don't have to wait for validator info to load; it's pre-fetched
Let me create a Python script and GitHub Action for you:


fetch_validators.py
Code 

.github/workflows/update-validators.yml
Code 
Now let's create the updated ValidatorListInterface component that reads from the JSON file:


ValidatorListInterface.tsx (using JSON data)
Code 



name: Update Validator Data

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - 'fetch_validators.py'
      - '.github/workflows/update-validators.yml'

jobs:
  update-validators:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.18.4/install)"
        echo "/home/runner/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    
    - name: Configure Solana CLI
      run: |
        solana config set --url https://rpc.testnet.x1.xyz
    
    - name: Create cache directory
      run: |
        mkdir -p .validator_cache
    
    - name: Cache validator data
      uses: actions/cache@v3
      with:
        path: .validator_cache
        key: ${{ runner.os }}-validator-cache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-validator-cache-
    
    - name: Run validator fetch script
      id: fetch_validators
      run: |
        python fetch_validators.py --fast
      env:
        GITHUB_OUTPUT: ${{ github.output_path }}
        RPC_URL: "https://rpc.testnet.x1.xyz"
        MAX_WORKERS: "5"
        MAX_RETRIES: "3"
        ALWAYS_EXIT_ZERO: "true"
    
    - name: Commit and push if changed
      if: steps.fetch_validators.outputs.validators_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        # Set the target repository
        git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/TreeCityWes/x1-val-stats.git
        # Create the output directory if it doesn't exist
        mkdir -p public/data
        git add public/data/validators.json
        git commit -m "Update validator data [skip ci]"
        git push -u origin main
